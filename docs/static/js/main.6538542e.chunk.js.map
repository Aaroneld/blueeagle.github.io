{"version":3,"sources":["components/NavBar.jsx","components/BioDiv.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["StyledH1","styled","h1","RightNavDiv","div","StyledNav","nav","props","background","StyledLink","Link","NavBar","style","lightBlue","superLightBlue","to","BioDiv","globalStyleValues","fontColor","GloballyStyledDiv","CenteredContainerDiv","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"m/BAMA,IAAMA,EAAWC,IAAOC,GAAV,KAGRC,EAAcF,IAAOG,IAAV,KAMXC,EAAYJ,IAAOK,IAAV,KAKC,SAAAC,GAAK,OAAIA,EAAMC,WAAaD,EAAMC,WAAa,eAIzDC,EAAaR,YAAOS,IAAPT,CAAH,KAUQ,SAAAM,GAAK,OAAIA,EAAMC,WAAaD,EAAMC,WAAa,eA8BxDG,EA1BA,SAACJ,GAAW,IAAD,EACWA,EAAMK,MAAlCC,EADiB,EACjBA,UAAUC,EADO,EACPA,eAEjB,OACE,gCACE,kBAACT,EAAD,CAAWG,WAAYK,GACrB,6BACE,kBAACb,EAAD,uBAGF,kBAACG,EAAD,KAKE,kBAACM,EAAD,CAAYD,WAAYM,EAAgBC,GAAG,KAA3C,QACA,kBAACN,EAAD,CAAYD,WAAYM,EAAgBC,GAAG,aAA3C,YACA,kBAACN,EAAD,CAAYD,WAAYM,EAAgBC,GAAG,SAA3C,QACA,kBAACN,EAAD,CAAYD,WAAYM,EAAgBC,GAAG,YAA3C,eC5CKC,EAVA,SAACT,GAGd,OACE,yC,8fCAJ,IAAMU,EAAoB,CACxBC,UAAW,UACXL,UAAW,UACXC,eAAgB,WAEVI,EAA8BD,EAA9BC,UAAWJ,EAAmBG,EAAnBH,eAEbK,EAAoBlB,IAAOG,IAAV,IAGZc,EAGEA,GAQPE,EAAuBnB,IAAOG,IAAV,IAKVU,GAmBDO,MAff,WAGE,OACE,kBAACF,EAAD,CAAmBG,UAAU,OAC3B,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQV,MAAOK,IACf,kBAACG,EAAD,KACE,kBAAC,EAAD,CAAQE,UAAW,wBChCTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6538542e.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\n\r\n// Styled components\r\n\r\nconst StyledH1 = styled.h1`\r\n  margin-left: 0;\r\n`\r\nconst RightNavDiv = styled.div`\r\n  display: flex;\r\n  flex-basis: 30%;\r\n  height: 100%;\r\n  justify-content: space-between;\r\n`\r\nconst StyledNav = styled.nav`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  height: 8vh;\r\n  background: ${props => props.background ? props.background : 'lightBlue'};\r\n  padding-left: 3%;\r\n  padding-right: 3%;\r\n`\r\nconst StyledLink = styled(Link)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 0 1.5rem;\r\n  margin: 0;\r\n  font-size: 1.2rem;\r\n\r\n  &:hover {\r\n    background-color: ${props => props.background ? props.background : 'lightcyan'};\r\n  }\r\n`\r\n\r\nconst NavBar = (props) => {\r\n  const {lightBlue,superLightBlue} = props.style\r\n\r\n  return (\r\n    <header>\r\n      <StyledNav background={lightBlue}>\r\n        <div>\r\n          <StyledH1>Collin's Code</StyledH1>\r\n        </div>\r\n        \r\n        <RightNavDiv>\r\n          {/* // <Link to=\"/projects\"><ButtonDiv>Projects</ButtonDiv></Link>\r\n          // <Link to=\"/blog\"><ButtonDiv>Blog</ButtonDiv></Link>\r\n          // <Link to=\"/contact\"><ButtonDiv>Contact</ButtonDiv></Link> */}\r\n\r\n          <StyledLink background={superLightBlue} to=\"/\">Home</StyledLink>\r\n          <StyledLink background={superLightBlue} to=\"/projects\">Projects</StyledLink>\r\n          <StyledLink background={superLightBlue} to=\"/blog\">Blog</StyledLink>\r\n          <StyledLink background={superLightBlue} to=\"/contact\">Contact</StyledLink>\r\n\r\n        </RightNavDiv>\r\n      </StyledNav>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default NavBar","import React from 'react'\r\n\r\nconst BioDiv = (props) => {\r\n  \r\n\r\n  return (\r\n    <div>\r\n      Bio div\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BioDiv","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport styled from 'styled-components'\nimport NavBar from './NavBar'\nimport BioDiv from './BioDiv'\n\nconst globalStyleValues = {\n  fontColor: '#1F2041',\n  lightBlue: '#62A8AC',\n  superLightBlue: '#E0FFFF'\n}\nconst { fontColor, superLightBlue } = globalStyleValues\n\nconst GloballyStyledDiv = styled.div`\n  @import url('https://fonts.googleapis.com/css2?family=Arvo&display=swap');\n  font-family: 'Arvo', serif;\n  color: ${fontColor};\n\n  a {\n    color: ${fontColor};\n    text-decoration: none;\n  }\n\n  .bordered-module {\n    background: red;\n  }\n`\nconst CenteredContainerDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: ${superLightBlue};\n  height: 92vh;\n`\n\nfunction App() {\n  \n\n  return (\n    <GloballyStyledDiv className=\"App\">\n      <Router>\n        <NavBar style={globalStyleValues} />\n        <CenteredContainerDiv>\n          <BioDiv className={\"bordered-module\"}/>\n        </CenteredContainerDiv>\n      </Router>\n    </GloballyStyledDiv>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}